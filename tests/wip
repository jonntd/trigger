# Notes about whats am I working on / things to do next
=======================================================

MODULE PROCEDURALISM:
=====================
---
AIM
---
This means when a new module is going to be added, ideally nothing will be changed other than the module folder.

My initial thought about adding a new module is 2 steps:
    - add the .py module file (based upon the boilerplate)
    - edit the all_modules_data.py file to support the new module

This means Guide creation, Rig building and UI will be completely procedural.

* This can be more procedural but more cryptic by removing the second step but lets keep things simple for now

-------
BENEFIT
-------
Adding a new module will be very simple. Moreover, anyone will be capable of doing that by following some simple rules.

------
METHOD
------

__init__.py file under the modules contains a simple function which gathers all the modules under the folder into the __all__ variable
So basically when trigger.modules imported, it imports all the modules underneath

!!! It also imports the boilerplate right now. Since it has no function and is not defined in all_modules_data.py it has no effect

??? modules can have specific prefix or suffixes like mod_arm or arm_m and these prefixes can be identifier for the init file function

all_modules_data.py file holds a dictionary only (for now)
The reason I am not holding the info as a .json file because all_modules_data can hold some internal functions which will extract
the data from the modules. Right now, the necessary data is entered manually.

the structure is simple but it can be extended until reaching the aim.

MODULE_DICTIONARY = {
    <limbtype>: {
        "members": [<Root>, <Second>, <Third>, <End>],
        "properties": [<list of properties which root joint will hold>],
        "multi_guide": <Procedurally repeating member>,
    },
    <anotherlimb>:{
    ....
    }

??? Properties must be turned into a dictionary. Each property will hold much more information than just name

limbtype: name of the limb almost start with a non-capital letter. Single word.
members: Order is important. Starts with the root guide.
properties: These properties will be procedurally generated as a property on root initial guide joints. Also these will be
            Arguments in the module class and will be collected and passed procedurally by builder
multi_guide: This will define whether the limb has fixed joints like an arm module or arbitrary number of joints like a tail.
             the member defined here is the repeating guide. For example this will be the "neck" for limbtype head since
             there will be different number of joints for different creatures.

-----
STATE
-----
Currently builder collects all the info procedurally and parses the build command. Initials and GUI is still manual

---------------
WHAT TO DO NEXT
---------------
Start changing the properties value in the MODULE_DICTIONARY into a dictionary. List is not enough for further development.
Once it is working with the builder, move on to initials an re-write the initials to be procedural with modules.

Each module will need a separate draw_guides function. Initial joints will be created here. Initials module will parse the
command according to the info gathered from all_modules_data just like builder does.




