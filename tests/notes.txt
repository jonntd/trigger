self.collar_pos => self.leg_root_pos
self.shoulder_pos => self.hip_pos
self.elbow_pos => self.knee_pos
self.hand_pos => self.foot_pos

self.j_def_collar => self.jDef_legRoot

self.j_collar_end => self.j_def_hip

self.j_def_elbow => self.j_def_midLeg
self.j_def_hand => self.j_def_foot


self.j_ik_orig_up => self.j_ik_orig_root
self.j_ik_orig_low => self.j_ik_orig_knee
self.j_ik_orig_low_end => self.j_ik_orig_end


## Matrix Constraint

Matrix constraint should not use be used if:
- Driven node is a joint
- Driver or driven has a frozen transform
- Rotate pivot of the driven has been changed
- If there are multiple drivers the driver weights will be altered later


# Sample Dev Script:
#######################################################################[START]
#######################################################################[START]
#######################################################################[START]
import sys
import os

# add the system path new trigger folder exclusively to prevent clashes
# each new new trigger module uses trigger.<module> paths to acces modules

# windows dev path
#trigger_path = "C:\\Users\\kutlu\\Documents\\maya\\scripts\\TRigger"
# linux dev path
trigger_path = "/home/masqu3rad3/maya/scripts/TRigger"

if trigger_path not in sys.path:
    sys.path.append(trigger_path)

# load reload all modules

# Core
from trigger.core import undo_dec
reload(undo_dec)
from trigger.core import feedback
reload(feedback)
from trigger.core import io
reload(io)
from trigger.core import settings
reload(settings)

# Guides
from trigger.guides import initials
reload(initials)

# Library
from trigger.library import controllers
reload(controllers)
from trigger.library import functions
reload(functions)
from trigger.library import ribbon
reload(ribbon)
from trigger.library import tools
reload(tools)
from trigger.library import twist_spline
reload(twist_spline)

# Modules
from trigger import modules
reload(modules)
from trigger.modules import arm
reload(arm)
from trigger.modules import finger
reload(finger)
from trigger.modules import head
reload(head)
from trigger.modules import leg
reload(leg)
from trigger.modules import root
reload(root)
from trigger.modules import spine
reload(spine)
from trigger.modules import tail
reload(tail)
from trigger.modules import tentacle
reload(tentacle)
from trigger.modules import all_modules_data
reload(all_modules_data)

# Rig
from trigger.rig import connections
reload(connections)
from trigger.rig import scratch
reload(scratch)
from trigger.rig import weights
reload(weights)
from trigger.rig import builder
reload(builder)

# Utils
from trigger.utils import mr_cubic
reload(mr_cubic)
from trigger.utils import space_switcher
reload(space_switcher)

# UI
# from trigger.ui import start
# reload(start)

from trigger.ui import main
reload(main)
main.MainUI() # show() runs inside the init

# start.MainUI().show()

# import time
# start=time.time()
# init=initials.Initials()
# init.initHumanoid()
# end = time.time()
# print "Guide Time: %s" % (end-start)

# cmds.undoInfo(ock=True)
# start=time.time()
# b = builder.Builder()
# b.start_building("jInit_spine_c_0")
# end = time.time()
# print "Build Time: %s" % (end-start)
# cmds.undoInfo(cck=True)


# test = init.initLimb("head", whichSide="right", segments=2)
# from trigger import modules
# reload(modules)

# module_dictA = {mod: eval("modules.{0}.LIMB_DATA".format(mod)) for mod in modules.__all__}

# module_dictB = modules.all_modules_data.MODULE_DICTIONARY

# valid_limbs = module_dictA.keys()
# non_sided_limbs = [limb for limb in self.valid_limbs if not self.module_dict[limb]["sided"]]


#######################################################################[END]
#######################################################################[END]
#######################################################################[END]


